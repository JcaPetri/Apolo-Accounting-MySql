-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
-- Create the accprntaxposition_mir table
-- ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Delete the table accprntaxposition_mir if Exits, but first you must to altere the tables that have a referenced foreign key
USE accountingdb;

-- After deleted the referenced, you can delete the table
DROP TABLE IF EXISTS `accountingdb`.`accprntaxposition_mir`;

CREATE TABLE `accountingdb`.`accprntaxposition_mir` (
    `accprntaxposition_idnum` int NOT NULL AUTO_INCREMENT COMMENT 'The accprntaxposition_idnum is the autoincrement number', 
    `accprntaxposition_id` char(38) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL COMMENT 'The accprntaxposition_id is the uniqueidentifier auto generated V4', 
    `afipdocumenttype_idn` int NOT NULL COMMENT 'The afipdocumenttype_idn is the IdNum of the type of AFIP documents, It could be DNI, Passport, LC, etc',
    `afipdocumentvalue` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL COMMENT 'This value can be a number / text, CUIT, Passport afanumber, etc.',
    `afipdocumentname` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL COMMENT 'The is the Name of the Person, can be physic or legal.',
    `state_idn` smallint NOT NULL COMMENT 'The stated_idn define if the record is enable or not, or the custom state difined.',
    `createdby_idn` int NOT NULL COMMENT 'The createdby_idn is the user_idnum of the user who created the record. Linked to the userdb database through userauthorization_mir.',
    `lastmodifiedby_idn` int NOT NULL COMMENT 'The lastmodifiedby_idn is the user_idnum of the last one that modified the record. Linked to the userdb database through userauthorization_mir.',
    `ownedby_idn` int NOT NULL COMMENT 'The ownedby_idn is the user_idnum of the record owner. Linked to the userdb database through userauthorization_mir.',
    `date_created` datetime(6) NOT NULL COMMENT 'The date_created is the record creation datetime UTC.',
    `date_timestamp` datetime(6) NOT NULL COMMENT 'The date_timestamp is the datetime UTC of the last modification.',
    `tzname_idn` smallint NOT NULL COMMENT 'The accaccprntaxposition_idnum of the TimeZone.',
    `tzoffset` smallint NOT NULL COMMENT 'The number of the diference between ZeroTimeZone and the TimeZone where the record is created or updated.',
    `table_history` text CHARACTER SET utf8mb4 COLLATE utf8mb4_bin COMMENT 'The table_history contain then change history of each column. The value is set only if it has changed from the previous value.',
    PRIMARY KEY `accprntaxpositionidnum_aptpkey` (`accprntaxposition_idnum`) COMMENT 'The sequence autoincremental value.',
    UNIQUE KEY `accprntaxpositionidnum_aptpuni` (`accprntaxposition_idnum`) COMMENT 'The accprntaxposition_idnum must be unique.',
    KEY `accprntaxpositionidnum_aptpidx` (`accprntaxposition_idnum` ASC) /*!80000 INVISIBLE */ COMMENT 'The accprntaxposition_idnum alway must be indexed.',
    UNIQUE KEY `accprntaxpositionid_aptpuni` (`accprntaxposition_id`) /*!80000 INVISIBLE */ COMMENT 'Is the uniqueidentifier.',
    KEY `accprntaxpositionid_aptpidx` (`accprntaxposition_id` ASC) /*!80000 INVISIBLE */ COMMENT 'The accprntaxposition_id alway must be indexed.',
    UNIQUE KEY `afipdoctypevalue_aptpuni` (`afipdocumenttype_idn`, `afipdocumentvalue`) COMMENT 'A Document value must be unique for a Document Type.',
    KEY `afipdoctypevalue_aptpidx` (`afipdocumenttype_idn` ASC, `afipdocumentvalue` ASC) /*!80000 INVISIBLE */ COMMENT 'The accprntaxposition_idnum must always be indexed.'
) ENGINE=InnoDB 
    AUTO_INCREMENT=0 
    DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin 
    COMMENT='Contains the Mirror of the prntaxposition_tbl form persondb.
The user never changed this table, it has been changed throw Kafka from the persondb.
This table contain the information about the Person tax position.';

-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
-- Create the Trigger Before Insert - accprntaxposition_mir
USE accountingdb;
DROP TRIGGER IF EXISTS `accountingdb`.`accprntaxpositionBeforeInsert_Trg`;
DELIMITER $$
USE `accountingdb`$$
-- DEFINER=`root`@`localhost` -- When create Trigger in localhost, must add Definer between CREATE and TRIGGER key word.
CREATE TRIGGER `accprntaxpositionBeforeInsert_Trg` BEFORE INSERT ON `accprntaxposition_mir` FOR EACH ROW BEGIN
    -- In the case, which the request do not give this value, MySql created it.
    -- Set the baseelement_id uniqueidentifier, id_order, date_created and date_timestamp
    IF new.accprntaxposition_id IS NULL OR new.accprntaxposition_id = '' THEN
        SET new.accprntaxposition_id = uuid(); -- Set the UniqueIdentifier Value
    END IF;
    SET new.date_created = ifnull(new.date_created,CURRENT_TIMESTAMP);
    SET new.date_timestamp = ifnull(new.date_timestamp,CURRENT_TIMESTAMP);
END$$
DELIMITER ;

-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
-- Create the Trigger Before Update - accprntaxposition_mir
-- en caso que desde Java no pasen la informacion de estos campos,
-- establece el valor del date_timestamp, table_history creando el historico de cada registro
USE accountingdb;
DROP TRIGGER IF EXISTS `accountingdb`.`accprntaxpositionBeforeUpdate_Trg`;
DELIMITER $$
USE `accountingdb`$$
-- DEFINER=`root`@`localhost` -- When create Trigger in localhost, must add Definer between CREATE and TRIGGER key word.
CREATE TRIGGER `accprntaxpositionBeforeUpdate_Trg` BEFORE UPDATE ON `accprntaxposition_mir` FOR EACH ROW BEGIN
    DECLARE v_tablehistory text;
    DECLARE v_tablehistoryold text;
    SET new.date_timestamp = ifnull(new.date_timestamp,CURRENT_TIMESTAMP);
    IF new.table_history = 'SetNull' THEN
        SET new.table_history = null;
    ELSEIF new.table_history = 'SetOff' THEN
        SET new.table_history = old.table_history;
    ELSE
        -- When the (New) value is equal the (Old), you set an empty update, because the value is steal in the record.
        -- When the (New) value is diferent with the (Old), you set the old value in the update. The new value is in the record.
        SET v_tablehistoryold := old.table_history;
        SET v_tablehistory = '';
        -- accprntaxposition_idnum, this value never changes.
        -- accprntaxposition_id, this value never changes.
        IF NEW.afipdocumenttype_idn <> OLD.afipdocumenttype_idn THEN SET v_tablehistory := OLD.afipdocumenttype_idn; ELSE SET v_tablehistory := '†'; END IF;
        IF NEW.afipdocumentvalue <> OLD.afipdocumentvalue THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.afipdocumentvalue); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF NEW.afipdocumentname <> OLD.afipdocumentname THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.afipdocumentname); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF NEW.state_idn <> OLD.state_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.state_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF NEW.createdby_idn <> OLD.createdby_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.createdby_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF NEW.lastmodifiedby_idn <> OLD.lastmodifiedby_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.lastmodifiedby_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF NEW.ownedby_idn <> OLD.ownedby_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.ownedby_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF v_tablehistoryold IS NULL THEN
            SET v_tablehistory := CONCAT(v_tablehistory,'†',NEW.date_created); 
            -- This only add the date_created if is the first time that are going to set up the history value.
        ELSE 
            SET v_tablehistory := CONCAT(v_tablehistory,'†'); 
            -- Do not add a date_created, the record only have the first one.
        END IF;
        IF NEW.date_timestamp <> OLD.date_timestamp THEN SET v_tablehistory := concat(v_tablehistory,'†',OLD.date_timestamp); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF NEW.tzname_idn <> OLD.tzname_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.tzname_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF NEW.tzoffset <> OLD.tzoffset THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.tzoffset); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF v_tablehistoryold IS NULL THEN
            SET NEW.table_history := v_tablehistory;
            -- This line ensures add the first history value.
        ELSE
            SET NEW.table_history := concat(v_tablehistory,'‡',v_tablehistory);
            -- This line concat the new and old history value.
        END IF;
    END IF;
END$$
DELIMITER ;

-- Lista los datos de la tabla
SELECT * FROM `accountingdb`.`accprntaxposition_mir`;
