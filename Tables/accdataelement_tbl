-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
-- Create the accdataelement_tbl table
/*
Contains the elements of all Accounting Microservice tables.
Concept: One row can be the union off many records, one for each column. To do that is necessary to use father_idn column.
                 Each record is like a cell in a excel grid.
                 To define properties to a field/column, you must specify it, in the accdataelementproperty_tbl. Ex: CSS format, Validation Rules, etc.
                 The group_idn define the section, region, company, etc., that the scope belongs to. This group is created in the systemdb database.
The key for each record:
    ID --> is the uniqueidentifier auto generated.
    dataelement_idnum --> is the autoincrement number auto generated.
        Clarification: idn = idnum (all the field ended with _idn, the origen of the value is the column idnum of the table sysbaseelement_tbl or accdataelement_tbl).
The unique Key is the union of:
    For the same idname word to have different meanings depending on its use, it is defined for a Scope, Group and Language.
        fieldvalue -> is the readable code by the user.
        father_idn -> the father_idn define each row of the table.
        scope_idn -> the scope_idn define the table that contain all the row.
        group_idn -> the group_idn is the section, company, businessunit owner of the tables.
        language_idn -> the fieldvalue mus be unique for the language. This dictionary has a default language defined.
Modification Rules Only when the definition_idn is software:
    You can change the idname if there is a spelling error. Example you have a spelling error in an invoce and must be invoice.
    Warning: If I change the code that represents the word invoice and it is an afip receipt. And I put food, everywhere the code is, food will start to appear.
        If you want to change the code and it is in many places, the system must generate another code for the new value.
        To change this value, it must be done by the administrator. 
        IT IS BEST TO NEVER CHANGE IT.
    Clarification: the only rules to change the common data is respect the unique key.
Kafka/RabbitMQ:
    If one element of this table must be in other microservices, the idnum must be added to accdataelementkafka_tbl and assigned to the specific topic.  
Common Field/Columns for all tables
  The objective of these is to store critical information for the system and the record history.
    stated_idn --> The stated_idn define if the record is enabled or not, or the custom state defined. Linked to the system database through sysbaseelement_mir.
    createdby_idn --> The createdby_idn is the userauthorization_idn of the user who created the record. Linked to the userdb database through userauthorization_tbl.
    lastmodifiedby_idn --> The lastmodifiedby_idn is the userauthorization_idn of the last one that modified the record. Linked to the userdb database through userauthorization_tbl.
    ownedby_idn --> The ownedby_idn is the userauthorization_idn of the record owner. Linked to the userdb database through userauthorization_tbl.
    date_created --> The date_created is the record creation datetime UTC.
    date_timestamp --> The date_timestamp is the datetime UTC of the last modification.
    tzname_idn --> The sysbaseelement_idnum of the Time Zone. Linked to the system database through sysbaseelement_mir.
    tzoffset --> The number of the difference between Zero Time Zone and the Time Zone where the record is created or updated.
    table_history --> The table_history contain then change history of each column. The value is set only if it has changed from the previous value.
*/

-- #########################################################################################################################################################################################
-- ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Delete the table accdataelement_tbl if Exits, but first you must to altere the tables that have a referenced foreign key

USE accountingdb;
-- First you must to delete the Foreing Key Constraint;
-- The referenced accdataelement_tbl Tables:
ALTER TABLE `accountingdb`.`artdataelementlanguag_tbl` DROP FOREIGN KEY `dataelementlanguageidn_adecrel`;
ALTER TABLE `accountingdb`.`artdataelementcomment_tbl` DROP FOREIGN KEY `dataelementcommentidn_adecrel`;


USE accountingdb;
-- After deleted the referenced, you can delete the table
DROP TABLE IF EXISTS `accountingdb`.`accdataelement_tbl`;

CREATE TABLE `accountingdb`.`accdataelement_tbl` (
    `dataelement_idnum` int NOT NULL AUTO_INCREMENT COMMENT 'The dataelement_idnum is the autoincrement number', 
    `dataelement_id` char(38) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL COMMENT 'The dataelement_id is the uniqueidentifier auto generated V4', 
    `tablefield_idn` integer NOT NULL COMMENT 'The tablefield_idn is the baseelement_idn of the field/column assined to row. Linked to the system database through sysbaseelement_mir.',
    `fieldvaluetype_idn` integer NOT NULL COMMENT 'The fieldvaluetype_idn is the baseelement_idn of the type the fieldvalue (ex, text, number, other idnum, etc). Linked to the system database through sysbaseelement_mir.',
    `fieldvalue` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL COMMENT 'The fieldvalue is a numeric/text/etc value of the field/column, this value is not standar and canÂ´t be multilanguage. If the value is an dataelementotherfield_idnum Type, the meaning is in the accdataelement_tbl. In this case the fieldvaluetype_idn must be 1509 FieldValueIDn.',
    `fieldstructure_idn` int NOT NULL COMMENT 'The fieldstructure_idn is the dataelement_idnum of the fieldvalue structure, if it is multivalued, here it refers to the structure. Linked to the system database through sysbaseelement_mir.',
    `language_idn` int NOT NULL COMMENT 'The language_idn is the dataelement_idnum of the language in which the field value is defined. Linked to the system database through sysbaseelement_mir.',
    `father_idn` int NOT NULL COMMENT 'The father_idn is the dataelement_idnum of the row, this idnum join all fields/columns making a classical table.',
    `scope_idn` int NOT NULL COMMENT 'The scope_idn is the dataelement_idnum of the scope, the idname must be unique for the scope_id of application, usually a Table',
    `group_idn` int NOT NULL COMMENT 'The group_idn this can be articles types, Sector, BusinessUnits, Company, etc. This can be an array of Groups. Linked to the system database through sysbaseelement_mir.',
    `id_order` int NOT NULL COMMENT 'The id_order is used to order the row/field/column of one record. If the user do not define it, the system use an autoincremental number, usign the row criteria father_idn.',
    `definition_idn` int NOT NULL COMMENT 'The definition_idn is the dataelement_idnum of the element definition type, could be software, data, bpmn, etc. Linked to the system database through sysbaseelement_mir.',
    `state_idn` smallint NOT NULL COMMENT 'The stated_idn define if the record is enable or not, or the custom state difined. Linked to the system database through sysbaseelement_mir.',
    `createdby_idn` int NOT NULL COMMENT 'The createdby_idn is the user_idnum of the user who created the record. Linked to the userdb database through userauthorization_tbl.',
    `lastmodifiedby_idn` int NOT NULL COMMENT 'The lastmodifiedby_idn is the user_idnum of the last one that modified the record. Linked to the userdb database through userauthorization_tbl.',
    `ownedby_idn` int NOT NULL COMMENT 'The ownedby_idn is the user_idnum of the record owner. Linked to the userdb database through userauthorization_tbl.',
    `date_created` datetime(6) NOT NULL COMMENT 'The date_created is the record creation datetime UTC.',
    `date_timestamp` datetime(6) NOT NULL COMMENT 'The date_timestamp is the datetime UTC of the last modification.',
    `tzname_idn` smallint NOT NULL COMMENT 'The sysbaseelement_idnum of the TimeZone. Linked to the system database through sysbaseelement_mir.',		
    `tzoffset` smallint NOT NULL COMMENT 'The number of the diference between ZeroTimeZone and the TimeZone where the record is created or updated.',
    `table_history` text CHARACTER SET utf8mb4 COLLATE utf8mb4_bin COMMENT 'The table_history contain then change history of each column. The value is set only if it has changed from the previous value.',
    PRIMARY KEY `id_adekey` (`dataelement_idnum`) COMMENT 'The sequence is an autoincremental value.',
    UNIQUE KEY `id_adeuni` (`dataelement_id`) /*!80000 INVISIBLE */ COMMENT 'Is the uniqueidentifier.',
    UNIQUE KEY `dataelement_idnum_adeuni` (`dataelement_idnum`) COMMENT 'The dataelements_idnum must be unique.',
    UNIQUE KEY `idfieldvalfatherscopegrouplang_adeuni` (`fieldvalue` ASC, `father_idn` ASC, `scope_idn` ASC, `group_idn` ASC, `language_idn` ASC) COMMENT 'A fieldvalue must be unique for a father_idn, scope_idn, for a group_idn, and language_idn.',
    KEY `id_adeidx` (`dataelement_id`) /*!80000 INVISIBLE */ COMMENT 'The dataelement_id alway must be indexed.',
    KEY `dataelement_idnum_adeidx` (`dataelement_idnum`) /*!80000 INVISIBLE */ COMMENT 'The dataelement_idnum must always be indexed.',
    KEY `stategroupscope_adeidx` (`state_idn`ASC, `group_idn` ASC, `scope_idn`ASC) COMMENT 'To optimize the search of Microservices Tables.'
) ENGINE=InnoDB 
  AUTO_INCREMENT=0 
  DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin 
  COMMENT='
Contains the elements of all Accounting Microservice tables.
Concept: One row can be the union off many records, one for each column. To do that is necessary to use father_idn column.
                 Each record is like a cell in a excel grid.
                 To define properties to a field/column, you must specify it, in the accdataelementproperty_tbl. Ex: CSS format, Validation Rules, etc.
                 The group_idn define the section, region, company, etc., that the scope belongs to. This group is created in the systemdb database.
The key for each record:
    ID --> is the uniqueidentifier auto generated.
    dataelement_idnum --> is the autoincrement number auto generated.
        Clarification: idn = idnum (all the field ended with _idn, the origen of the value is the column idnum of the table sysbaseelement_tbl or accdataelement_tbl).
The unique Key is the union of:
    For the same idname word to have different meanings depending on its use, it is defined for a Scope, Group and Language.
        fieldvalue -> is the readable code by the user.
        father_idn -> the father_idn define each row of the table.
        scope_idn -> the scope_idn define the table that contain all the row.
        group_idn -> the group_idn is the section, company, businessunit owner of the tables.
        language_idn -> the fieldvalue mus be unique for the language. This dictionary has a default language defined.
Modification Rules Only when the definition_idn is software:
    You can change the idname if there is a spelling error. Example you have a spelling error in an invoce and must be invoice.
    Warning: If I change the code that represents the word invoice and it is an afip receipt. And I put food, everywhere the code is, food will start to appear.
        If you want to change the code and it is in many places, the system must generate another code for the new value.
        To change this value, it must be done by the administrator. 
        IT IS BEST TO NEVER CHANGE IT.
    Clarification: the only rules to change the common data is respect the unique key.';

-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
-- Create the Trigger Before Insert - accdataelement_tbl
USE accountingdb;
DROP TRIGGER IF EXISTS `accountingdb`.`accdataelementBeforeInsert_Trg`;
DELIMITER $$
USE `accountingdb`$$
    -- DEFINER=`root`@`localhost` -- When create Trigger in localhost, must add Definer between CREATE and TRIGGER key word.
CREATE TRIGGER `accdataelementBeforeInsert_Trg` BEFORE INSERT ON `accdataelement_tbl` FOR EACH ROW BEGIN
    -- In the case, which the request do not give this value, MySql created it.
    -- Set the ID uniqueidentifier, id_order, date_created and date_timestamp
    IF new.dataelement_id IS NULL OR new.dataelement_id = '' THEN
        SET new.dataelement_id = uuid(); -- Set the UniqueIdentifier Value
    END IF;
    IF new.id_order IS NULL OR new.id_order = 0 OR new.id_order = '' THEN
        SET new.id_order = (SELECT ifnull(MAX(id_order),0) + 1 FROM `accountingdb`.`accdataelement_tbl` WHERE father_idn = new.father_idn);
        -- Assign the numeric auto-incremental id_order for the father_idn, so the column are ordered. 
        -- If the row has only one column the value is 1.
        -- The id_order is used to set the orden inside the scopes.
    END IF;
    SET new.date_created = ifnull(new.date_created,CURRENT_TIMESTAMP);
    SET new.date_timestamp = ifnull(new.date_timestamp,CURRENT_TIMESTAMP);
END$$
DELIMITER ;

-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
-- Create the Trigger Before Update - accdataelement_tbl
-- en caso que desde Java no pasen la informacion de estos campos,
-- establece el valor del date_timestamp, table_history creando el historico de cada registro
USE accountingdb;
DROP TRIGGER IF EXISTS `accountingdb`.`accdataelementBeforeUpdate_Trg`;
DELIMITER $$
USE `accountingdb`$$
    -- DEFINER=`root`@`localhost` -- When create Trigger in localhost, must add Definer between CREATE and TRIGGER key word.
CREATE TRIGGER `accdataelementBeforeUpdate_Trg` BEFORE UPDATE ON `accdataelement_tbl` FOR EACH ROW BEGIN
    DECLARE v_tablehistory text;
    DECLARE v_tablehistoryold text;
    SET new.date_timestamp = ifnull(new.date_timestamp,CURRENT_TIMESTAMP);
    IF new.table_history = 'SetNull' THEN
        SET new.table_history = null;
    ELSEIF new.table_history = 'SetOff' THEN
        SET new.table_history = old.table_history;
    ELSE
        -- When the (New) value is equal the (Old), you set an empty update, because the value is steal in the record.
        -- When the (New) value is diferent with the (Old), you set the old value in the update. The new value is in the record.
        SET v_tablehistoryold := old.table_history;
        SET v_tablehistory = '';
        -- dataelement_idnum, this value never changes.
        -- dataelement_id, this value never changes.
        IF NEW.tablefield_idn <> OLD.tablefield_idn THEN SET v_tablehistory := OLD.tablefield_idn; ELSE SET v_tablehistory := 'â '; END IF;
        IF NEW.fieldvaluetype_idn <> OLD.fieldvaluetype_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'â ',OLD.fieldvaluetype_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'â '); END IF;
        IF NEW.fieldvalue <> OLD.fieldvalue THEN SET v_tablehistory := CONCAT(v_tablehistory,'â ',OLD.fieldvalue); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'â '); END IF;
        IF NEW.fieldstructure_idn <> OLD.fieldstructure_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'â ',OLD.fieldstructure_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'â '); END IF;
        IF NEW.language_idn <> OLD.language_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'â ',OLD.language_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'â '); END IF;
        IF NEW.father_idn <> OLD.father_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'â ',OLD.father_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'â '); END IF;
        IF NEW.scope_idn <> OLD.scope_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'â ',OLD.scope_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'â '); END IF;
        IF NEW.group_idn <> OLD.group_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'â ',OLD.group_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'â '); END IF;
        IF NEW.id_order <> OLD.id_order THEN SET v_tablehistory := CONCAT(v_tablehistory,'â ',OLD.id_order); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'â '); END IF;
        IF NEW.definition_idn <> OLD.definition_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'â ',OLD.definition_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'â '); END IF;
        IF NEW.state_idn <> OLD.state_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'â ',OLD.state_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'â '); END IF;
        IF NEW.createdby_idn <> OLD.createdby_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'â ',OLD.createdby_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'â '); END IF;
        IF NEW.lastmodifiedby_idn <> OLD.lastmodifiedby_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'â ',OLD.lastmodifiedby_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'â '); END IF;
        IF NEW.ownedby_idn <> OLD.ownedby_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'â ',OLD.ownedby_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'â '); END IF;
        IF v_tablehistoryold IS NULL THEN
            SET v_tablehistory := CONCAT(v_tablehistory,'â ',NEW.date_created); 
            -- This only add the date_created if is the first time that are going to set up the history value.
        ELSE 
            SET v_tablehistory := CONCAT(v_tablehistory,'â '); 
            -- Do not add a date_created, the record only have the first one.
        END IF;
        IF NEW.date_timestamp <> OLD.date_timestamp THEN SET v_tablehistory := concat(v_tablehistory,'â ',OLD.date_timestamp); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'â '); END IF;
        IF NEW.tzname_idn <> OLD.tzname_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'â ',OLD.tzname_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'â '); END IF;
        IF NEW.tzoffset <> OLD.tzoffset THEN SET v_tablehistory := CONCAT(v_tablehistory,'â ',OLD.tzoffset); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'â '); END IF;
        IF v_tablehistoryold IS NULL THEN
            SET NEW.table_history := v_tablehistory;
            -- This line ensures add the first history value.
        ELSE
            SET NEW.table_history := concat(v_tablehistory,'â¡',v_tablehistory);
            -- This line concat the new and old history value.
        END IF;
    END IF;
END$$
DELIMITER ;

-- Lista los datos de la tabla
SELECT * FROM `accountingdb`.`accdataelement_tbl`;
