-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
-- Create the accafipivasalereceipt_tbl table
/*Contains all the information on the sales receipts stored in the AFIP.
This information is chargered automatically by the software. 
The user should never change this table.*/
-- #############################################################################################################################################################################
-- Delete the table accafipivasalereceipt_tbl if Exits, but first you must to altere the tables that have a referenced foreign key
USE accountingdb;

-- After deleted the referenced, you can delete the table
DROP TABLE IF EXISTS `accountingdb`.`accafipivasalereceipt_tbl`;

CREATE TABLE `accountingdb`.`accafipivasalereceipt_tbl` (
    `accafipivasalereceipt_idnum` int NOT NULL AUTO_INCREMENT COMMENT 'The accafipivasalereceipt_idnum is the autoincrement number', 
    `accafipivasalereceipt_id` char(38) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL COMMENT 'The accafipivasalereceipt_id is the uniqueidentifier auto generated V4',
    `afipperiod_idn` int NOT NULL COMMENT 'The afipperiod_idn is the accafipivasalereceipt_idnum of the table who has the general information.',
    `receiptdate` datetime NOT NULL COMMENT 'The Date of the Receipt is the record creation date with UTC.',
    `sellerreceipttype_idn` int NOT NULL COMMENT 'The sellerreceipttype_idn is the IdNum of the table 1538-AccAfipSalesReceiptTypes_tbl, could be FC A, B, NC A, B, etc.',
    `pointsales_idn` int NOT NULL COMMENT 'The pointsales_idn is the IdNum of the table 1542-AccAfipPointSales_tbl. This is diferent of PurchasePointSales, because we created previously in the system.',
    `receiptnumber` int NOT NULL COMMENT 'Is a integer number up of zero.',
    `receiptnumberTo` int NOT NULL COMMENT 'Is a integer number up of zero.',
    `buyerdocumentcode_idn` int NOT NULL COMMENT 'The BuyerDocumentIDn is the IdNum of the table 1541-AccAfipBuyerDocuments_tbl, could be CUIT, DNI, etc.',
    `afipsubject_idn` int NOT NULL COMMENT 'The afipsubject_idn is the IdNum of the table 1634-AccPrnAfipSubject_Mir, is the CUIT, LC, LE, etc, number.',
    `buyername` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL COMMENT 'The Name of the Buyer.',	  
    `totaloperation` decimal(13,2) NOT NULL COMMENT 'Is a numeric number with 2 zeros',
    `conceptsnotmakeupiva` decimal(13,2) NOT NULL COMMENT 'Is a numeric number with 2 zeros',
    `uncategorizedperception` decimal(13,2) NOT NULL COMMENT 'Is a numeric number with 2 zeros',
    `exemptoperations` decimal(13,2) NOT NULL COMMENT 'Is a numeric number with 2 zeros',
    `paymentperceptionnationaltaxes` decimal(13,2) NOT NULL COMMENT 'Is a numeric number with 2 zeros',
    `grossincomeperception` decimal(13,2) NOT NULL COMMENT 'Is a numeric number with 2 zeros',
    `municipaltaxperceptions` decimal(13,2) NOT NULL COMMENT 'Is a numeric number with 2 zeros',
    `internaltaxes` decimal(13,2) NOT NULL COMMENT 'Is a numeric number with 2 zeros',
    `currency_idn` int NOT NULL COMMENT 'The currency_idn is the IdNum of the table 1537-AccAfipCurrencies_tbl, could be PESO, $, YUAN.',
    `exchangerate` decimal(6,4) NOT NULL COMMENT 'Is a numeric number with 4 zeros',
    `numberivarates` smallint NOT NULL COMMENT 'The numberivarates is how many types of diferents IVA rates has the document.',
    `selleroperation_idn` int NOT NULL COMMENT 'The BuyerOperationIDn is the IdNum of the table 1624-AccAfipSellerOperations_tbl could be CUIT, DNI, etc.',
    `othertaxes` decimal(13,2) NOT NULL COMMENT 'Is a numeric number with 2 zeros',
    `paymentduerate` datetime NOT NULL COMMENT 'The Date of the probably payment of this receipts is the record creation date with UTC.',
    `computabletaxcredit` decimal(13,2) NOT NULL COMMENT 'Is a numeric number with 2 zeros',
    `issuercuit_idn` int NOT NULL COMMENT 'The issuercuit_idn is the afipsubject_idn, the value comes from the table 1634-AccPrnAfipSubject_Mir, is the CUIT, LC, LE, etc, number of the user emisor/corredor.',
    `issuername` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL COMMENT 'The Name of the user emisor/corredor.',	  
    `commisioniva` decimal(13,2) NOT NULL COMMENT 'Is a numeric number with 2 zeros',
    `state_idn` smallint NOT NULL COMMENT 'The stated_idn define if the record is enable or not, or the custom state difined. Linked to the system database through sysbaseelement_mir.',
    `createdby_idn` int NOT NULL COMMENT 'The createdby_idn is the user_idnum of the user who created the record. Linked to the userdb database through userauthorization_tbl.',
    `lastmodifiedby_idn` int NOT NULL COMMENT 'The lastmodifiedby_idn is the user_idnum of the last one that modified the record. Linked to the userdb database through userauthorization_tbl.',
    `ownedby_idn` int NOT NULL COMMENT 'The ownedby_idn is the user_idnum of the record owner. Linked to the userdb database through userauthorization_tbl.',
    `date_created` datetime(6) NOT NULL COMMENT 'The date_created is the record creation datetime UTC.',
    `date_timestamp` datetime(6) NOT NULL COMMENT 'The date_timestamp is the datetime UTC of the last modification.',
    `tzname_idn` smallint NOT NULL COMMENT 'The sysbaseelement_idnum of the TimeZone. Linked to the system database through sysbaseelement_mir.',		
    `tzoffset` smallint NOT NULL COMMENT 'The number of the diference between ZeroTimeZone and the TimeZone where the record is created or updated.',
    `table_history` text CHARACTER SET utf8mb4 COLLATE utf8mb4_bin COMMENT 'The table_history contain then change history of each column. The value is set only if it has changed from the previous value.',
    PRIMARY KEY `accafipivasalereceiptidnum_aivrskey` (`accafipivasalereceipt_idnum`) COMMENT 'The sequence AccAfipIvaSaleRates_tbl generate the nextval',
    UNIQUE KEY `accafipivasalereceiptidnum_aivrsuni` (`accafipivasalereceipt_idnum`) COMMENT 'The accafipivasalereceipt_idnum must be unique.',
    KEY `accafipivasalereceiptidnum_aivrsidx` (`accafipivasalereceipt_idnum`) /*!80000 INVISIBLE */ COMMENT 'The accafipivasalereceipt_idnum must always be indexed.',
    UNIQUE KEY `accafipivasalereceiptid_aivrsuni` (`accafipivasalereceipt_id`) /*!80000 INVISIBLE */ COMMENT 'Is the uniqueidentifier.',
    KEY `accafipivasalereceiptid_aivrsidx` (`accafipivasalereceipt_id`) /*!80000 INVISIBLE */ COMMENT 'The accafipivasalereceipt_id alway must be indexed.',
    KEY `salerecpointnumber_aivrsidx` (`sellerreceipttype_idn`,`pointsales_idn`,`receiptnumber`) /*!80000 INVISIBLE */ COMMENT 'The document combination must be indexed.',
    KEY `afipsubjectidn_aivrsidx` (`afipsubject_idn`) /*!80000 INVISIBLE */ COMMENT 'The afipsubject_idn is the cuit, lc, dni.',
    KEY `receiptdate_aivrsidx` (`receiptdate`) /*!80000 INVISIBLE */ COMMENT 'The date',
    KEY `afipperiodidn_aivrsidx` (`afipperiod_idn`) /*!80000 INVISIBLE */ COMMENT 'The afipperiod_idn'
) ENGINE=InnoDB 
    AUTO_INCREMENT=0 
    DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin 
    COMMENT='Contains all the information on the sales receipts stored in the AFIP.
This information is chargered automatically by the software. 
The user should never change this table.';

-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
-- Create the Trigger Before Insert - accdataelement_tbl
USE accountingdb;
DROP TRIGGER IF EXISTS `accountingdb`.`accafipivasalereceiptBeforeInsert_Trg`;
DELIMITER $$
USE `accountingdb`$$
    -- DEFINER=`root`@`localhost` -- When create Trigger in localhost, must add Definer between CREATE and TRIGGER key word.
CREATE TRIGGER `accafipivasalereceiptBeforeInsert_Trg` BEFORE INSERT ON `accafipivasalereceipt_tbl` FOR EACH ROW BEGIN
    -- In the case, which the request do not give this value, MySql created it.
    -- Set the ID uniqueidentifier, id_order, date_created and date_timestamp
    IF new.accafipivasalereceipt_id IS NULL OR new.accafipivasalereceipt_id = '' THEN
        SET new.accafipivasalereceipt_id = uuid(); -- Set the UniqueIdentifier Value
    END IF;
    SET new.date_created = ifnull(new.date_created,CURRENT_TIMESTAMP);
    SET new.date_timestamp = ifnull(new.date_timestamp,CURRENT_TIMESTAMP);
END$$
DELIMITER ;

-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
-- Create the Trigger Before Update - accdataelement_tbl
-- en caso que desde Java no pasen la informacion de estos campos,
-- establece el valor del date_timestamp, table_history creando el historico de cada registro
USE accountingdb;
DROP TRIGGER IF EXISTS `accountingdb`.`accafipivasalereceiptBeforeUpdate_Trg`;
DELIMITER $$
USE `accountingdb`$$
    -- DEFINER=`root`@`localhost` -- When create Trigger in localhost, must add Definer between CREATE and TRIGGER key word.
CREATE TRIGGER `accafipivasalereceiptBeforeUpdate_Trg` BEFORE UPDATE ON `accafipivasalereceipt_tbl` FOR EACH ROW BEGIN
    DECLARE v_tablehistory text;
    DECLARE v_tablehistoryold text;
    SET new.date_timestamp = ifnull(new.date_timestamp,CURRENT_TIMESTAMP);
    IF new.table_history = 'setnull' THEN
        SET new.table_history = null;
    ELSEIF new.table_history = 'setoff' THEN
        SET new.table_history = old.table_history;
    ELSE
        -- When the (New) value is equal the (Old), you set an empty update, because the value is steal in the record.
        -- When the (New) value is diferent with the (Old), you set the old value in the update. The new value is in the record.
        SET v_tablehistoryold := old.table_history;
        SET v_tablehistory = '';
        -- accafipivasalereceipt_idnum, this value never changes.
        -- accafipivasalereceipt_id, this value never changes.
        IF NEW.afipperiod_idn <> OLD.afipperiod_idn THEN SET v_TableHistory := OLD.afipperiod_idn; ELSE SET v_TableHistory := '†'; END IF;
        IF NEW.receiptdate <> OLD.receiptdate THEN SET v_TableHistory := OLD.receiptdate; ELSE SET v_TableHistory := '†'; END IF;
        IF NEW.sellerreceipttype_idn <> OLD.sellerreceipttype_idn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.sellerreceipttype_idn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
        IF NEW.pointsales_idn <> OLD.pointsales_idn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.pointsales_idn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
        IF NEW.receiptnumber <> OLD.receiptnumber THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.receiptnumber); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
        IF NEW.receiptnumberTo <> OLD.receiptnumberTo THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.receiptnumberTo); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
        IF NEW.buyerdocumentcode_idn <> OLD.buyerdocumentcode_idn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.buyerdocumentcode_idn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
        IF NEW.afipsubject_idn <> OLD.afipsubject_idn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.afipsubject_idn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
        IF NEW.buyername <> OLD.buyername THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.buyername); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
        IF NEW.totaloperation <> OLD.totaloperation THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.totaloperation); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
        IF NEW.conceptsnotmakeupiva <> OLD.conceptsnotmakeupiva THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.conceptsnotmakeupiva); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
        IF NEW.uncategorizedperception <> OLD.uncategorizedperception THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.uncategorizedperception); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
        IF NEW.exemptoperations <> OLD.exemptoperations THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.exemptoperations); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
        IF NEW.paymentperceptionnationaltaxes <> OLD.paymentperceptionnationaltaxes THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.paymentperceptionnationaltaxes); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
        IF NEW.grossincomeperception <> OLD.grossincomeperception THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.grossincomeperception); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
        IF NEW.municipaltaxperceptions <> OLD.municipaltaxperceptions THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.municipaltaxperceptions); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
        IF NEW.internaltaxes <> OLD.internaltaxes THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.internaltaxes); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
        IF NEW.currency_idn <> OLD.currency_idn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.currency_idn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
        IF NEW.exchangerate <> OLD.exchangerate THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.exchangerate); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
        IF NEW.numberivarates <> OLD.numberivarates THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.numberivarates); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
        IF NEW.selleroperation_idn <> OLD.selleroperation_idn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.selleroperation_idn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
        IF NEW.othertaxes <> OLD.othertaxes THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.othertaxes); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
        IF NEW.paymentduerate <> OLD.paymentduerate THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.paymentduerate); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
        IF NEW.computabletaxcredit <> OLD.computabletaxcredit THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.computabletaxcredit); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
        IF NEW.issuercuit_idn <> OLD.issuercuit_idn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.issuercuit_idn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
        IF NEW.issuername <> OLD.issuername THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.issuername); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
        IF NEW.commisioniva <> OLD.commisioniva THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.commisioniva); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
        IF NEW.state_idn <> OLD.state_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.state_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF NEW.createdby_idn <> OLD.createdby_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.createdby_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF NEW.lastmodifiedby_idn <> OLD.lastmodifiedby_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.lastmodifiedby_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF NEW.ownedby_idn <> OLD.ownedby_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.ownedby_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF v_tablehistoryold IS NULL THEN
            SET v_tablehistory := CONCAT(v_tablehistory,'†',NEW.date_created); 
            -- This only add the date_created if is the first time that are going to set up the history value.
        ELSE 
            SET v_tablehistory := CONCAT(v_tablehistory,'†'); 
            -- Do not add a date_created, the record only have the first one.
        END IF;
        IF NEW.date_timestamp <> OLD.date_timestamp THEN SET v_tablehistory := concat(v_tablehistory,'†',OLD.date_timestamp); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF NEW.tzname_idn <> OLD.tzname_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.tzname_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF NEW.tzoffset <> OLD.tzoffset THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.tzoffset); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF v_tablehistoryold IS NULL THEN
            SET NEW.table_history := v_tablehistory;
            -- This line ensures add the first history value.
        ELSE
            SET NEW.table_history := concat(v_tablehistory,'‡',v_tablehistory);
            -- This line concat the new and old history value.
        END IF;
    END IF;
END$$
DELIMITER ;
;

-- Lista los datos de la tabla
SELECT * FROM `accountingdb`.`accafipivasalereceipt_tbl`;
