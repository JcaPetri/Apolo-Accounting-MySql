-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
-- Create the accdataelementotherfield_tbl table
/*
Contains the Other Fields/Columns of the Data Elements records.
This other Fields/Columns, wich could be optional or not, complete the real table, but not not in the classic horizontal way but vertically.
Concept: 
    Tbl_1- each row of the accdataelement_tbl is record, but 
    Tbl_2- each row of the accdataelementotherfield_tbl is a new Field/Column of the record created in Tbl_1
    If one row of Tbl_1 do not have some row in Tbl_2, is like a null value in the classic horizontal table. 
Important: idn = idnum (all the field ended with _idn, the origen of the value is the column idnum of the table sysbaseelement_tbl or accdataelement_tbl).
The key for each row/record:
    dataelementotherfield_idnum --> is the autoincrement number auto generated, all the relation between tables are maded by this column.
    dataelementotherfield_id --> is the uniqueidentifier auto generated.
The unique Key is the union of:
    ataelement_idn -> the row from the accdataelement_tbl, that recieve more fields/columns.
    tablefield_idn -> the table field accsysbaseelement_mir, this table is linked with the System database throw Kafka.
        unique = One tablefield_idn must be unique for each dataelement_idn.
Kafka/RabbitMQ:
    If one element of this table must be in other microservices, the idnum must be added to accdataelementkafka_tbl and assigned to a the specific topic.  
Common Field/Columns for all tables
  The objective of these are to store critical information for the system and the record history.
    stated_idn --> The stated_idn define if the record is enable or not, or the custom state difined. Linked to the system database through sysbaseelement_mir.
    createdby_idn --> The createdby_idn is the user_idnum of the user who created the record. Linked to the userdb database through userauthorization_tbl.
    lastmodifiedby_idn --> The lastmodifiedby_idn is the user_idnum of the last one that modified the record. Linked to the userdb database through userauthorization_tbl.
    ownedby_idn --> The ownedby_idn is the user_idnum of the record owner. Linked to the userdb database through userauthorization_tbl.
    date_created --> The date_created is the record creation datetime UTC.
    date_timestamp --> The date_timestamp is the datetime UTC of the last modification.
    tzname_idn --> The sysbaseelement_idnum of the TimeZone. Linked to the system database through sysbaseelement_mir.
    tzoffset --> The number of the diference between ZeroTimeZone and the TimeZone where the record is created or updated.
    table_history --> The table_history contain then change history of each column. The value is set only if it has changed from the previous value.
*/

-- #########################################################################################################################################################################################
-- ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Delete the table accdataelementotherfield_tbl if Exits, but first you must to altere the tables that have a referenced foreign key
USE accountingdb;
-- First you must to delete the Foreing Key Constraint;
-- The referenced accdataelementotherfield_tbl Tables:
-- ALTER TABLE `accountingdb`.`SysMicroservices_tbl`  DROP FOREIGN KEY `MicroserviceIDn_Rel`;

-- After deleted the referenced, you can delete the table
DROP TABLE IF EXISTS `accountingdb`.`accdataelementotherfield_tbl`;

CREATE TABLE `accountingdb`.`accdataelementotherfield_tbl` (
    `dataelementotherfield_idnum` int NOT NULL AUTO_INCREMENT COMMENT 'The dataelementotherfield_idnum is the autoincrement number', 
    `dataelementotherfield_id` char(38) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL COMMENT 'The dataelementotherfield_id is the uniqueidentifier auto generated V4', 
    `dataelement_idn` integer NOT NULL COMMENT 'The dataelement_idn is the row of the table accdataelement_tbl who receive the new field/column.',
    `tablefield_idn` integer NOT NULL COMMENT 'The tablefield_idn is the baseelement_idn of the field/column assined to row. Linked to the system database through sysbaseelement_mir.',
    `fieldvaluetype_idn` integer NOT NULL COMMENT 'The fieldvaluetype_idn is the baseelement_idn of the type the fieldvalue (ex, text, number, other idnum, etc). Linked to the system database through sysbaseelement_mir.',
    `fieldvalue` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL COMMENT 'The fieldvalue is a numeric/text/etc value of the field/column, this value is not standar and canÂ´t be multilanguage. If the value is an dataelementotherfield_idnum Type, the meaning is in the accdataelement_tbl. In this case the fieldvaluetype_idn must be 1509 FieldValueIDn.',
    `fieldstructure_idn` int NOT NULL COMMENT 'The fieldstructure_idn is the dataelement_idnum of the fieldvalue structure, if it is multivalued, here it refers to the structure. Linked to the system database through sysbaseelement_mir.',
    `language_idn` int NOT NULL COMMENT 'The language_idn is the dataelement_idnum of the language in which the field value is defined. Linked to the system database through sysbaseelement_mir.',
    `id_code` int NOT NULL COMMENT 'The id_code is the unique code, of the record, for each dataelement_idn. This field is used to order the fields/columns of oner record. If the user do not define it, the system use an autoincremental number.',
    `definition_idn` int NOT NULL COMMENT 'The definition_idn is the dataelement_idnum of the element definition type. Linked to the system database through sysbaseelement_mir.',
    `state_idn` smallint NOT NULL COMMENT 'The stated_idn define if the record is enable or not, or the custom state difined. Linked to the system database through sysbaseelement_mir.',
    `createdby_idn` int NOT NULL COMMENT 'The createdby_idn is the user_idnum of the user who created the record. Linked to the userdb database through userauthorization_tbl.',
    `lastmodifiedby_idn` int NOT NULL COMMENT 'The lastmodifiedby_idn is the user_idnum of the last one that modified the record. Linked to the userdb database through userauthorization_tbl.',
    `ownedby_idn` int NOT NULL COMMENT 'The ownedby_idn is the user_idnum of the record owner. Linked to the userdb database through userauthorization_tbl.',
    `date_created` datetime(6) NOT NULL COMMENT 'The date_created is the record creation datetime UTC.',
    `date_timestamp` datetime(6) NOT NULL COMMENT 'The date_timestamp is the datetime UTC of the last modification.',
    `tzname_idn` smallint NOT NULL COMMENT 'The sysbaseelement_idnum of the TimeZone. Linked to the system database through sysbaseelement_mir.',		
    `tzoffset` smallint NOT NULL COMMENT 'The number of the diference between ZeroTimeZone and the TimeZone where the record is created or updated.',
    `table_history` text CHARACTER SET utf8mb4 COLLATE utf8mb4_bin COMMENT 'The table_history contain then change history of each column. The value is set only if it has changed from the previous value.',
    PRIMARY KEY `id_adofkey` (`dataelementotherfield_idnum`) COMMENT 'The sequence is an autoincremental value.',
    UNIQUE KEY `id_adofuni` (`dataelementotherfield_id`) /*!80000 INVISIBLE */ COMMENT 'Is the uniqueidentifier.',
    UNIQUE KEY `dataelementotherfield_adofuni` (`dataelementotherfield_idnum`) COMMENT 'The dataelementotherfield_idnum must be unique.',
    UNIQUE KEY `dataelemtablefield_adofuni` (`dataelement_idn`, `tablefield_idn`) COMMENT 'The tablefield_idn must be unique for a dataelement_idn.',
    KEY `id_adofidx` (`dataelementotherfield_id`) /*!80000 INVISIBLE */ COMMENT 'The dataelementotherfield_id alway must be indexed.',
    KEY `dataelementotherfield_idnum_adofidx` (`dataelementotherfield_idnum`) /*!80000 INVISIBLE */ COMMENT 'The dataelementotherfield_idnum must always be indexed.',
    KEY `dataelemtablefield_adofidx` (`dataelement_idn` ASC, `tablefield_idn` ASC) VISIBLE COMMENT 'To optimize the search of one element for a Tables.',
    CONSTRAINT `dataelementidn_adofrel` FOREIGN KEY (`dataelement_idn`) REFERENCES `accountingdb`.`accdataelement_tbl` (`dataelement_idnum`) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT `tablefieldidn_adofrel` FOREIGN KEY (`tablefield_idn`) REFERENCES `accountingdb`.`accsysbaseelement_mir` (`baseelement_idnum`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB 
    AUTO_INCREMENT=0 
    DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin 
    COMMENT='Contains the Other Fields/Columns of the Data Elements records.
This other Fields/Columns, wich could be optional or not, complete the real table, but not not in the classic horizontal way but vertically.
Concept: 
    Tbl_1- each row of the accdataelement_tbl is record, but 
    Tbl_2- each row of the accdataelementotherfield_tbl is a new Field/Column of the record created in Tbl_1
    If one row of Tbl_1 do not have some row in Tbl_2, is like a null value in the classic horizontal table. 
Important: idn = idnum (all the field ended with _idn, the origen of the value is the column idnum of the table sysbaseelement_tbl or accdataelement_tbl).
The key for each row/record:
    dataelementotherfield_idnum --> is the autoincrement number auto generated, all the relation between tables are maded by this column.
    dataelementotherfield_id --> is the uniqueidentifier auto generated.
The unique Key is the union of:
    ataelement_idn -> the row from the accdataelement_tbl, that recieve more fields/columns.
    tablefield_idn -> the table field accsysbaseelement_mir, this table is linked with the System database throw Kafka.
        unique = One tablefield_idn must be unique for each dataelement_idn.
Kafka/RabbitMQ:
    If one element of this table must be in other microservices, the idnum must be added to accdataelementkafka_tbl and assigned to a the specific topic.  
Common Field/Columns for all tables
  The objective of these are to store critical information for the system and the record history.
    stated_idn --> The stated_idn define if the record is enable or not, or the custom state difined. Linked to the system database through sysbaseelement_mir.
    createdby_idn --> The createdby_idn is the user_idnum of the user who created the record. Linked to the userdb database through userauthorization_tbl.
    lastmodifiedby_idn --> The lastmodifiedby_idn is the user_idnum of the last one that modified the record. Linked to the userdb database through userauthorization_tbl.
    ownedby_idn --> The ownedby_idn is the user_idnum of the record owner. Linked to the userdb database through userauthorization_tbl.
    date_created --> The date_created is the record creation datetime UTC.
    date_timestamp --> The date_timestamp is the datetime UTC of the last modification.
    tzname_idn --> The sysbaseelement_idnum of the TimeZone. Linked to the system database through sysbaseelement_mir.
    tzoffset --> The number of the diference between ZeroTimeZone and the TimeZone where the record is created or updated.
    table_history --> The table_history contain then change history of each column. The value is set only if it has changed from the previous value.';

-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
-- Create the Trigger Before Insert - accdataelementotherfield_tbl
USE accountingdb;
DROP TRIGGER IF EXISTS `accountingdb`.`accdataelementotherfieldBeforeInsert_Trg`;
DELIMITER $$
USE `accountingdb`$$
-- DEFINER=`root`@`localhost` -- When create Trigger in localhost, must add Definer between CREATE and TRIGGER key word.
CREATE TRIGGER `accdataelementotherfieldBeforeInsert_Trg` BEFORE INSERT ON `accdataelementotherfield_tbl` FOR EACH ROW BEGIN
    -- In the case, which the request do not give this value, MySql created it.
    -- Set the ID uniqueidentifier, IDCode, DateCreated and DateTimeStamp
    IF new.dataelementotherfield_id IS NULL OR new.dataelementotherfield_id = '' THEN
        SET new.dataelementotherfield_id = uuid();    -- Set the UniqueIdentifier Value
    END IF;
    IF new.id_code IS NULL OR new.id_code = 0 OR new.id_code = '' THEN
        SET new.id_code = (SELECT ifnull(MAX(id_code),0) + 1 FROM `accountingdb`.`accdataelementotherfield_tbl` WHERE dataelement_idn = new.dataelement_idn);
        -- Assign the numeric auto-incremental id_code for this dataelement_idn, because this number must be unique.
    END IF;
    SET new.DateCreated = ifnull(new.DateCreated,CURRENT_TIMESTAMP);
    SET new.DateTimeStamp = ifnull(new.DateTimeStamp,CURRENT_TIMESTAMP);
END$$
DELIMITER ;

-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
-- Create the Trigger Before Update - accdataelementotherfield_tbl
-- en caso que desde Java no pasen la informacion de estos campos,
-- establece el valor del DateTimeStamp, TableHistory creando el historico de cada registro
USE accountingdb;
DROP TRIGGER IF EXISTS `accountingdb`.`accdataelementotherfieldBeforeUpdate_Trg`;
DELIMITER $$
USE `accountingdb`$$
-- DEFINER=`root`@`localhost` -- When create Trigger in localhost, must add Definer between CREATE and TRIGGER key word.
CREATE TRIGGER `accdataelementotherfieldBeforeUpdate_Trg` BEFORE UPDATE ON `accdataelementotherfield_tbl` FOR EACH ROW BEGIN
    DECLARE v_TableHistory text;
    DECLARE v_TableHistoryOld text;
    SET new.DateTimeStamp = ifnull(new.DateTimeStamp,CURRENT_TIMESTAMP);
    IF new.TableHistory = 'SetNull' THEN
        SET new.TableHistory = null;
    ELSEIF new.TableHistory = 'SetOff' THEN
        SET new.TableHistory = old.TableHistory;
    ELSE
        -- When the (New) value is equal the (Old), you set an empty update, because the value is steal in the record.
        -- When the (New) value is diferent with the (Old), you set the old value in the update. The new value is in the record.
        SET v_TableHistoryOld := old.TableHistory;
        SET v_TableHistory = '';
        -- dataelementotherfield_idnum, this value never changes.
        -- dataelementotherfield_id, this value never changes.
        IF NEW.dataelement_idn <> OLD.dataelement_idn THEN SET v_TableHistory := OLD.dataelement_idn; ELSE SET v_TableHistory := 'â '; END IF;
        IF NEW.tablefield_idn <> OLD.tablefield_idn THEN SET v_TableHistory := OLD.tablefield_idn; ELSE SET v_TableHistory := 'â '; END IF;
        IF NEW.fieldvaluetype_idn <> OLD.fieldvaluetype_idn THEN SET v_TableHistory := CONCAT(v_TableHistory,'â ',OLD.fieldvaluetype_idn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'â '); END IF;
        IF NEW.field_value <> OLD.field_value THEN SET v_TableHistory := CONCAT(v_TableHistory,'â ',OLD.field_value); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'â '); END IF;
        IF NEW.fieldstructure_idn <> OLD.fieldstructure_idn THEN SET v_table_history := CONCAT(v_table_history,'â ',OLD.fieldstructure_idn); ELSE SET v_table_history := CONCAT(v_table_history,'â '); END IF;
        IF NEW.language_idn <> OLD.language_idn THEN SET v_table_history := CONCAT(v_table_history,'â ',OLD.language_idn); ELSE SET v_table_history := CONCAT(v_table_history,'â '); END IF;
        IF NEW.id_code <> OLD.id_code THEN SET v_table_history := CONCAT(v_table_history,'â ',OLD.id_code); ELSE SET v_table_history := CONCAT(v_table_history,'â '); END IF;
        IF NEW.definition_idn <> OLD.definition_idn THEN SET v_table_history := CONCAT(v_table_history,'â ',OLD.definition_idn); ELSE SET v_table_history := CONCAT(v_table_history,'â '); END IF;
        IF NEW.state_idn <> OLD.state_idn THEN SET v_table_history := CONCAT(v_table_history,'â ',OLD.state_idn); ELSE SET v_table_history := CONCAT(v_table_history,'â '); END IF;
        IF NEW.createdby_idn <> OLD.createdby_idn THEN SET v_table_history := CONCAT(v_table_history,'â ',OLD.createdby_idn); ELSE SET v_table_history := CONCAT(v_table_history,'â '); END IF;
        IF NEW.lastmodifiedby_idn <> OLD.lastmodifiedby_idn THEN SET v_table_history := CONCAT(v_table_history,'â ',OLD.lastmodifiedby_idn); ELSE SET v_table_history := CONCAT(v_table_history,'â '); END IF;
        IF NEW.ownedby_idn <> OLD.ownedby_idn THEN SET v_table_history := CONCAT(v_table_history,'â ',OLD.ownedby_idn); ELSE SET v_table_history := CONCAT(v_table_history,'â '); END IF;
        IF v_table_historyold IS NULL THEN
            SET v_table_history := CONCAT(v_table_history,'â ',NEW.date_created); 
            -- This only add the date_created if is the first time that are going to set up the history value.
        ELSE 
            SET v_table_history := CONCAT(v_table_history,'â '); 
            -- Do not add a date_created, the record only have the first one.
        END IF;
        IF NEW.date_timestamp <> OLD.date_timestamp THEN SET v_table_history := concat(v_table_history,'â ',OLD.date_timestamp); ELSE SET v_table_history := CONCAT(v_table_history,'â '); END IF;
        IF NEW.tzname_idn <> OLD.tzname_idn THEN SET v_table_history := CONCAT(v_table_history,'â ',OLD.tzname_idn); ELSE SET v_table_history := CONCAT(v_table_history,'â '); END IF;
        IF NEW.tzoffset <> OLD.tzoffset THEN SET v_table_history := CONCAT(v_table_history,'â ',OLD.tzoffset); ELSE SET v_table_history := CONCAT(v_table_history,'â '); END IF;
        IF v_table_historyold IS NULL THEN
            SET NEW.table_history := v_table_history;
            -- This line ensures add the first history value.
        ELSE
            SET NEW.table_history := concat(v_table_history,'â¡',v_table_history);
            -- This line concat the new and old history value.
        END IF;
    END IF;
END$$
DELIMITER ;

-- Lista los datos de la tabla
SELECT * FROM `accountingdb`.`accdataelementotherfield_tbl`;
