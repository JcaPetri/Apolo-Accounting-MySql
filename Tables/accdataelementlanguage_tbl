-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
-- Create the accdataelementlanguage_tbl table
-- ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Delete the table accdataelementlanguage_tbl if Exits, but first you must to altere the tables that have a referenced foreign key
USE accountingdb;
-- First you must to delete the Foreing Key Constraint;
-- The referenced accdataelementlanguage_tbl Tables:
-- ALTER TABLE `accountingdb`.`accdataelementlanguagelanguage_tbl` DROP FOREIGN KEY `dataelementlanguageidn_rel`;

-- After deleted the referenced, you can delete the table
DROP TABLE IF EXISTS `accountingdb`.`accdataelementlanguage_tbl`;

CREATE TABLE `accountingdb`.`accdataelementlanguage_tbl` (
    `dataelementlanguage_idnum` int NOT NULL AUTO_INCREMENT COMMENT 'The dataelementlanguage_idnum is the autoincrement number', 
    `dataelementlanguage_id` char(38) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL COMMENT 'The dataelementlanguage_id is the uniqueidentifier auto generated V4', 
    `dataelement_idn` integer NOT NULL COMMENT 'The dataelement_idn is the idnum of the fieldvalue from the accdataelement_tbl, which are going to receive the meaning in another languages than default.',
    `fieldvalue` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL COMMENT 'The fieldvalue is the user-readable code for the selected language.',
    `language_idn` int NOT NULL COMMENT 'The language_idn is the IdNum of the language in which the Name is defined',
-- This value never change from the original table accdataelement_tbl
    `fieldvaluetype_idn` integer NOT NULL COMMENT 'The fieldvaluetype_idn is allway 1511-fieldvaluetext, (because the number and the acctem idnum are numbers).',
    `tablefield_idn` integer NOT NULL COMMENT 'The tablefield_idn is the dataelement_idn of the field/column assined to row.',
    `father_idn` int NOT NULL COMMENT 'The father_idn is the dataelement_idnum of the row, this idnum join all fields/columns making a classical table.',
    `scope_idn` int NOT NULL COMMENT 'The scope_idn is the idnum of the Scope, the Name must be unique for the scope of application, usually a Table',
    `group_idn` int NOT NULL COMMENT 'The group_idn is the idnum of the section/businessunit/company/etc to which the fieldvalue is assigned',
    `state_idn` smallint NOT NULL COMMENT 'The stated_idn define if the record is enable or not, or the custom state difined.',
    `createdby_idn` int NOT NULL COMMENT 'The createdby_idn is the user_idnum of the user who created the record. Linked to the userdb datadata through userauthorization_mir.',
    `lastmodifiedby_idn` int NOT NULL COMMENT 'The lastmodifiedby_idn is the user_idnum of the last one that modified the record. Linked to the userdb datadata through userauthorization_mir.',
    `ownedby_idn` int NOT NULL COMMENT 'The ownedby_idn is the user_idnum of the record owner. Linked to the userdb datadata through userauthorization_mir.',
    `date_created` datetime(6) NOT NULL COMMENT 'The date_created is the record creation datetime UTC.',
    `date_timestamp` datetime(6) NOT NULL COMMENT 'The date_timestamp is the datetime UTC of the last modification.',
    `tzname_idn` smallint NOT NULL COMMENT 'The accdataelementlanguage_idnum of the TimeZone.',
    `tzoffset` smallint NOT NULL COMMENT 'The number of the diference between ZeroTimeZone and the TimeZone where the record is created or updated.',
    `table_history` text CHARACTER SET utf8mb4 COLLATE utf8mb4_bin COMMENT 'The table_history contain then change history of each column. The value is set only if it has changed from the previous value.',
    PRIMARY KEY `dataelementlanguageidnum_abelKey` (`dataelementlanguage_idnum`) COMMENT 'The sequence is an autoincremental value.',
    UNIQUE KEY `dataelementlanguageidnum_abeluni` (`dataelementlanguage_idnum`) COMMENT 'The dataelementlanguage_idnum must be unique.',
    KEY `dataelementlanguageidnum_abelidx` (`dataelementlanguage_idnum`) /*!80000 INVISIBLE */ COMMENT 'The dataelementlanguage_idnum must always be indexed.',
    UNIQUE KEY `dataelementlanguageid_abeluni` (`dataelementlanguage_id`) /*!80000 INVISIBLE */ COMMENT 'Is the uniqueidentifier.',
    KEY `dataelementlanguageid_abelidx` (`dataelementlanguage_id`) /*!80000 INVISIBLE */ COMMENT 'The dataelementlanguage_id alway must be indexed.',
    UNIQUE KEY `fieldvalfatherscopegrouplang_abeluni` (`fieldvalue` ASC, `father_idn` ASC,`scope_idn` ASC,`group_idn` ASC,`language_idn` ASC) COMMENT 'A fieldvalue must be unique for a father_idn, scope_idn, for a group_idn, and language_idn.',
    KEY `dataelementscopegrouplang_abelidx` (`dataelement_idn`ASC, `scope_idn`ASC, `group_idn` ASC, `state_idn`ASC) COMMENT 'To optimize the search of Microservices Tables.',
    CONSTRAINT `dataelementidn_sbelrel` FOREIGN KEY (`dataelement_idn`) REFERENCES `accountingdb`.`accdataelement_tbl` (`dataelement_idnum`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB 
    AUTO_INCREMENT=0 
    DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin 
    COMMENT='Contains the meaning of the elements (of all tables in the Accounting Microservice) in another language than the default.
Concept: The only data that accept another language is the fieldvaluetype_idn 1511 - fieldvaluetext, (because the number and the system idnum are numbers).
             In this table you have to comply with the same rules as the accdataelement_tbl.
             Each record is like a cell in a excel grid, so we can define the language of each cell.
Clarification: the values dataelement_idn, father_idn, scope_idn, group_idn = are always equal to the accdataelement_tbl. 
                 These columns are put in this table only to ensure integrity and that there are no duplicates.
The key for each record:
    dataelementlanguage_id --> is the uniqueidentifier auto generated.
    dataelementlanguage_idnum --> is the autoincrement number auto generated.
        Clarification: idn = idnum (all the field ended with _idn, the origen of the value is the column idnum of the table accdataelement_tbl).
                         Most fields in tables have an idnum as a value. To determine what a code means, you should consult this table.
                         If you select another language_idn, the acctem change all theirs values.
The unique Key is the union of:
    To respect all the rules the unique value must be the combination of: FieldValue/Father/Scope/Group/Language.
    -- This three values are defined by the user.
        dataelement_idn --> the idnum of the element that has another languages meaning. It is created in the accdataelement_tbl.
        fieldvalue -> is the readable code by the user, in another language than default.
        language_idn -> the fieldvalue must be different than the language.';

/*    Example:
        TblOrigin => dataelement_idn 1331 - fieldvaluetype_idn 1511 - fieldvalue Articles_Tbl - language_idn English
        ThisTable => dataelement_idn 1331 - fieldvaluetype_idn 1511 - fieldvalue Produtis_Tbl - language_idn Italian
    -- This three values are set by the system automaticaly, and are the same as the accdataelement_Tbl. For do that use the dataelement_idn.
        fieldvaluetype_idn - the fieldvaluetype_idn is allway 1511-fieldvaluetext, (because the number and the acctem idnum are numbers).
        father_idn -> the father_idn define each row of the table.
        scope_idn -> the scope_idn define the table that contain all the row.
        group_idn -> the group_idn is the section, company, businessunit owner of the tables.
Modification Rules Only when the definition_idn is software:
    In this table all values can be changed because there are not a system data.
    But is important to know:
        You can change the idname if there is a spelling error. Example you have a spelling error in an invoce and must be invoice.
        Warning: If I change the code that represents the word invoice and it is an afip receipt. And I put food, everywhere the code is, food will start to appear.
            If you want to change the code and it is in many places, the acctem must generate another code for the new value.
            To change this value, it must be done by the administrator. 
            IT IS BEST TO NEVER CHANGE IT.
    Clarification: this rules applied to the system data, the only rules to change the common data is respect the unique key.
Kafka/RabbitMQ:
    If one element of this table must be in other microservices, the idnum must be added to accdataelementkafka_tbl and assigned to the specific topic.
    The key is acctable_idn, element_idn (dataelementlanguage_idnum), kafkatopic_idn.
Common Field/Columns for all tables
  The objective of these is to store critical information for the acctem and the record history.
    stated_idn --> The stated_idn define if the record is enabled or not, or the custom state defined. Linked to the acctem datadata through accdataelementlanguage_mir.
    createdby_idn --> The createdby_idn is the userauthorization_idn of the user who created the record. Linked to the userdb datadata through userauthorization_tbl.
    lastmodifiedby_idn --> The lastmodifiedby_idn is the userauthorization_idn of the last one that modified the record. Linked to the userdb datadata through userauthorization_tbl.
    ownedby_idn --> The ownedby_idn is the userauthorization_idn of the record owner. Linked to the userdb datadata through userauthorization_tbl.
    date_created --> The date_created is the record creation datetime UTC.
    date_timestamp --> The date_timestamp is the datetime UTC of the last modification.
    tzname_idn --> The accdataelementlanguage_idnum of the Time Zone. Linked to the acctem datadata through accdataelementlanguage_mir.
    tzoffset --> The number of the difference between Zero Time Zone and the Time Zone where the record is created or updated.
    table_history --> The table_history contain then change history of each column. The value is set only if it has changed from the previous value.
*/

-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
-- Create the Trigger Before Insert - accdataelementlanguage_tbl
USE accountingdb;
DROP TRIGGER IF EXISTS `accountingdb`.`accdataelementlanguageBeforeInsert_Trg`;
DELIMITER $$
USE `accountingdb`$$
-- DEFINER=`root`@`localhost` -- When create Trigger in localhost, must add Definer between CREATE and TRIGGER key word.
CREATE TRIGGER `accdataelementlanguageBeforeInsert_Trg` BEFORE INSERT ON `accdataelementlanguage_tbl` FOR EACH ROW BEGIN
    -- In the case, which the request do not give this value, MySql created it.
    -- Set the dataelement_id uniqueidentifier, id_order, date_created and date_timestamp
    IF new.dataelementlanguage_id IS NULL OR new.dataelementlanguage_id = '' THEN
        SET new.dataelementlanguage_id = uuid(); -- Set the UniqueIdentifier Value
    END IF;
    SET new.date_created = ifnull(new.date_created,CURRENT_TIMESTAMP);
    SET new.date_timestamp = ifnull(new.date_timestamp,CURRENT_TIMESTAMP);
END$$
DELIMITER ;

-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
-- Create the Trigger Before Update - accdataelementlanguage_tbl
-- en caso que desde Java no pasen la informacion de estos campos,
-- establece el valor del date_timestamp, table_history creando el historico de cada registro
USE accountingdb;
DROP TRIGGER IF EXISTS `accountingdb`.`accdataelementlanguageBeforeUpdate_Trg`;
DELIMITER $$
USE `accountingdb`$$
-- DEFINER=`root`@`localhost` -- When create Trigger in localhost, must add Definer between CREATE and TRIGGER key word.
CREATE TRIGGER `accdataelementlanguageBeforeUpdate_Trg` BEFORE UPDATE ON `accdataelementlanguage_tbl` FOR EACH ROW BEGIN
    DECLARE v_tablehistory text;
    DECLARE v_tablehistoryold text;
    SET new.date_timestamp = ifnull(new.date_timestamp,CURRENT_TIMESTAMP);
    IF new.table_history = 'SetNull' THEN
        SET new.table_history = null;
    ELSEIF new.table_history = 'SetOff' THEN
        SET new.table_history = old.table_history;
    ELSE
        -- When the (New) value is equal the (Old), you set an empty update, because the value is steal in the record.
        -- When the (New) value is diferent with the (Old), you set the old value in the update. The new value is in the record.
        SET v_tablehistoryold := old.table_history;
        SET v_tablehistory = '';
        -- dataelementlanguage_idnum, this value never changes.
        -- dataelementlanguage_id, this value never changes.
        IF NEW.dataelement_idn <> OLD.dataelement_idn THEN SET v_tablehistory := OLD.dataelement_idn; ELSE SET v_tablehistory := '†'; END IF;
        IF NEW.fieldvalue <> OLD.fieldvalue THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.fieldvalue); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF NEW.language_idn <> OLD.language_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.language_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF NEW.fieldvaluetype_idn <> OLD.fieldvaluetype_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.fieldvaluetype_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF NEW.tablefield_idn <> OLD.tablefield_idn THEN SET v_tablehistory := OLD.tablefield_idn; ELSE SET v_tablehistory := '†'; END IF;
        IF NEW.father_idn <> OLD.father_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.father_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF NEW.scope_idn <> OLD.scope_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.scope_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF NEW.group_idn <> OLD.group_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.group_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF NEW.state_idn <> OLD.state_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.state_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF NEW.createdby_idn <> OLD.createdby_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.createdby_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF NEW.lastmodifiedby_idn <> OLD.lastmodifiedby_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.lastmodifiedby_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF NEW.ownedby_idn <> OLD.ownedby_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.ownedby_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF v_tablehistoryold IS NULL THEN
            SET v_tablehistory := CONCAT(v_tablehistory,'†',NEW.date_created); 
            -- This only add the date_created if is the first time that are going to set up the history value.
        ELSE 
            SET v_tablehistory := CONCAT(v_tablehistory,'†'); 
            -- Do not add a date_created, the record only have the first one.
        END IF;
        IF NEW.date_timestamp <> OLD.date_timestamp THEN SET v_tablehistory := concat(v_tablehistory,'†',OLD.date_timestamp); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF NEW.tzname_idn <> OLD.tzname_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.tzname_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF NEW.tzoffset <> OLD.tzoffset THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.tzoffset); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF v_tablehistoryold IS NULL THEN
            SET NEW.table_history := v_tablehistory;
            -- This line ensures add the first history value.
        ELSE
            SET NEW.table_history := concat(v_tablehistory,'‡',v_tablehistory);
            -- This line concat the new and old history value.
        END IF;
    END IF;
END$$
DELIMITER ;

-- Lista los datos de la tabla
SELECT * FROM `accountingdb`.`accdataelementlanguage_tbl`;
