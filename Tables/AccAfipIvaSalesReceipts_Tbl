-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
-- Create the AccAfipIvaSaleReceipts_Tbl table
/*Contains all the information on the sales receipts stored in the AFIP.
This information is chargered automatically by the software. 
The user should never change this table.*/
-- #############################################################################################################################################################################
-- Delete the table AccAfipIvaSaleReceipts_Tbl if Exits, but first you must to altere the tables that have a referenced foreign key
USE accountingdb;

-- After deleted the referenced, you can delete the table
DROP TABLE IF EXISTS `accountingdb`.`AccAfipIvaSaleReceipts_Tbl`;

CREATE TABLE `accountingdb`.`AccAfipIvaSaleReceipts_Tbl` (
    `IDNum` int NOT NULL AUTO_INCREMENT COMMENT 'The IDNum is the autoincrement number', 
    `ID` char(38) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL COMMENT 'The ID is the uniqueidentifier auto generated V4',
    `AfipIvaIDn` int NOT NULL COMMENT 'The AfipIvaIDn is the IDNum of the table who has the general information.',
    `ReceiptDate` datetime NOT NULL COMMENT 'The Date of the Receipt is the record creation date with UTC.',
    `SellerReceiptTypeIDn` int NOT NULL COMMENT 'The SellerReceiptTypeIDn is the IdNum of the table 1538-AccAfipSalesReceiptTypes_Tbl, could be FC A, B, NC A, B, etc.',
    `PointSalesIDn` int NOT NULL COMMENT 'The PointSalesIDn is the IdNum of the table 1542-AccAfipPointSales_Tbl. This is diferent of PurchasePointSales, because we created previously in the system.',
    `ReceiptNumber` int NOT NULL COMMENT 'Is a integer number up of zero.',
    `ReceiptNumberTo` int NOT NULL COMMENT 'Is a integer number up of zero.',
    `BuyerDocumentCodeIDn` int NOT NULL COMMENT 'The BuyerDocumentIDn is the IdNum of the table 1541-AccAfipBuyerDocuments_Tbl, could be CUIT, DNI, etc.',
    `AfipSubjectIDn` int NOT NULL COMMENT 'The AfipSubjectIDn is the IdNum of the table 1634-AccPrnAfipSubject_Mir, is the CUIT, LC, LE, etc, number.',
    `BuyerName` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL COMMENT 'The Name of the Buyer.',	  
    `TotalOperation` decimal(13,2) NOT NULL COMMENT 'Is a numeric number with 2 zeros',
    `ConceptsNotMakeUpIva` decimal(13,2) NOT NULL COMMENT 'Is a numeric number with 2 zeros',
    `UncategorizedPerception` decimal(13,2) NOT NULL COMMENT 'Is a numeric number with 2 zeros',
    `ExemptOperations` decimal(13,2) NOT NULL COMMENT 'Is a numeric number with 2 zeros',
    `PaymentPerceptionNationalTaxes` decimal(13,2) NOT NULL COMMENT 'Is a numeric number with 2 zeros',
    `GrossIncomePerception` decimal(13,2) NOT NULL COMMENT 'Is a numeric number with 2 zeros',
    `MunicipalTaxPerceptions` decimal(13,2) NOT NULL COMMENT 'Is a numeric number with 2 zeros',
    `InternalTaxes` decimal(13,2) NOT NULL COMMENT 'Is a numeric number with 2 zeros',
    `CurrencyIDn` int NOT NULL COMMENT 'The CurrencyIDn is the IdNum of the table 1537-AccAfipCurrencies_Tbl, could be PESO, $, YUAN.',
    `ExchangeRate` decimal(6,4) NOT NULL COMMENT 'Is a numeric number with 4 zeros',
    `NumberIvaRates` smallint NOT NULL COMMENT 'The NumberIvaRates is how many types of diferents IVA rates has the document.',
    `SellerOperationIDn` int NOT NULL COMMENT 'The BuyerOperationIDn is the IdNum of the table 1624-AccAfipSellerOperations_Tbl could be CUIT, DNI, etc.',
    `OtherTaxes` decimal(13,2) NOT NULL COMMENT 'Is a numeric number with 2 zeros',
    `PaymentDueRate` datetime NOT NULL COMMENT 'The Date of the probably payment of this receipts is the record creation date with UTC.',
    `ComputableTaxCredit` decimal(13,2) NOT NULL COMMENT 'Is a numeric number with 2 zeros',
    `IssuerCuitIDn` int NOT NULL COMMENT 'The IssuerCuitIDn is the AfipSubjectIDn, the value comes from the table 1634-AccPrnAfipSubject_Mir, is the CUIT, LC, LE, etc, number of the user emisor/corredor.',
    `IssuerName` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL COMMENT 'The Name of the user emisor/corredor.',	  
    `CommisionIva` decimal(13,2) NOT NULL COMMENT 'Is a numeric number with 2 zeros',
    `StateIDn` smallint NOT NULL COMMENT 'The StatedIDn define if the record is enable or not.',
    `CreatedByIDn` int NOT NULL COMMENT 'The CreatedByIDn is the IdNum of the user who created the record.',
    `LastModifiedByIDn` int NOT NULL COMMENT 'The LastModifiedByIDn is the IdNum of the last user who modified the record.',
    `OwnerIDn` int NOT NULL COMMENT 'The OwnerIDn is the IdNum of the record owner.',
    `DateCreated` datetime NOT NULL COMMENT 'The DateCreated is the record creation date with UTC.',
    `DateTimeStamp` timestamp NOT NULL COMMENT 'The DateTimeStamp is the date of the last modification of the record with UTC.',
    `TzNameIDn` smallint NOT NULL COMMENT 'The IDNum of the TimeZone',				
    `TzOffset` smallint NOT NULL COMMENT 'The diferences between ZeroTimeZone and the TimeZone where the record is created or updated.',					
    `TableHistory` text CHARACTER SET utf8mb4 COLLATE utf8mb4_bin COMMENT 'The TableHistory contain then change history of each column.',
    PRIMARY KEY `ID_AirsPriKey` (`IDNum`) COMMENT 'The sequence AccAfipIvaSaleRates_Tbl generate the nextval',
    UNIQUE KEY `ID_AirsUnique` (`ID`) /*!80000 INVISIBLE */ COMMENT 'Is the uniqueidentifier.',
    UNIQUE KEY `IDNum_AirsUnique` (`IDNum`) COMMENT 'The IDNum must be unique.',
    KEY `ID_AirsIdx` (`ID`) /*!80000 INVISIBLE */ COMMENT 'The ID alway must be indexed.',
    KEY `IDNum_AirsIdx` (`IDNum`) /*!80000 INVISIBLE */ COMMENT 'The IDNum must always be indexed.',
    KEY `SaleRecPointNumber_AirsIdx` (`SellerReceiptTypeIDn`,`PointSalesIDn`,`ReceiptNumber`) /*!80000 INVISIBLE */ COMMENT 'The document combination must be indexed.',
    KEY `AfipSubjectIDn_AirsIdx` (`AfipSubjectIDn`) /*!80000 INVISIBLE */ COMMENT 'The AfipSubjectIDn is the cuit, lc, dni.',
    KEY `ReceiptDate_AirsIdx` (`ReceiptDate`) /*!80000 INVISIBLE */ COMMENT 'The date',
    KEY `AfipIvaIDn_AirsIdx` (`AfipIvaIDn`) /*!80000 INVISIBLE */ COMMENT 'The AfipIvaIDn'
) ENGINE=InnoDB 
    AUTO_INCREMENT=0 
    DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin 
    COMMENT='Contains all the information on the sales receipts stored in the AFIP.
This information is chargered automatically by the software. 
The user should never change this table.';

-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
-- Create the Trigger Before Insert - AccAfipIvaSaleReceipts_Tbl
USE accountingdb;
DROP TRIGGER IF EXISTS `accountingdb`.`AccAfipIvaSaleReceiptsBeforeInsert_Trg`;
DELIMITER $$
USE `accountingdb`$$
-- DEFINER=`root`@`localhost` -- When create Trigger in localhost, must add Definer between CREATE and TRIGGER key word.
CREATE TRIGGER `AccAfipIvaSaleReceiptsBeforeInsert_Trg` BEFORE INSERT ON `AccAfipIvaSaleReceipts_Tbl` FOR EACH ROW BEGIN
    -- In the case, which the request do not give this value, MySql created it.
    -- Set the ID uniqueidentifier, IDCode, DateCreated and DateTimeStamp
    IF new.ID IS NULL OR new.ID = '' THEN
        SET new.ID = uuid();				-- Set the UniqueIdentifier Value
    END IF;
    SET new.DateCreated = ifnull(new.DateCreated,CURRENT_TIMESTAMP);
    SET new.DateTimeStamp = ifnull(new.DateTimeStamp,CURRENT_TIMESTAMP);
END$$
DELIMITER ;

exist@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
-- Create the Trigger Before Update - AccAfipIvaSaleReceipts_Tbl
-- en caso que desde Java no pasen la informacion de estos campos,
-- establece el valor del DateTimeStamp, TableHistory creando el historico de cada registro
USE accountingdb;
DROP TRIGGER IF EXISTS `accountingdb`.`AccAfipIvaSaleReceiptsBeforeUpdate_Trg`;
DELIMITER $$
USE `accountingdb`$$
-- DEFINER=`root`@`localhost` -- When create Trigger in localhost, must add Definer between CREATE and TRIGGER key word.
CREATE TRIGGER `AccAfipIvaSaleReceiptsBeforeUpdate_Trg` BEFORE UPDATE ON `AccAfipIvaSaleReceipts_Tbl` FOR EACH ROW BEGIN
    DECLARE v_TableHistory text;
    DECLARE v_TableHistoryOld text;
    SET new.DateTimeStamp = ifnull(new.DateTimeStamp,CURRENT_TIMESTAMP);
    IF new.TableHistory = 'SetNull' THEN
        SET new.TableHistory = null;
    ELSEIF new.TableHistory = 'SetOff' THEN
        SET new.TableHistory = old.TableHistory;
    ELSE
    -- When the (New) value is equal the (Old), you set an empty update, because the value is steal in the record.
    -- When the (New) value is diferent with the (Old), you set the old value in the update. The new value is in the record.
    SET v_TableHistoryOld := old.TableHistory;
    SET v_TableHistory = '';
    -- IDNum, this value never changes.
    -- ID, this value never changes.
    IF NEW.AfipIvaIDn <> OLD.AfipIvaIDn THEN SET v_TableHistory := OLD.AfipIvaIDn; ELSE SET v_TableHistory := '†'; END IF;
    IF NEW.ReceiptDate <> OLD.ReceiptDate THEN SET v_TableHistory := OLD.ReceiptDate; ELSE SET v_TableHistory := '†'; END IF;
    IF NEW.SellerReceiptTypeIDn <> OLD.SellerReceiptTypeIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.SellerReceiptTypeIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
    IF NEW.PointSalesIDn <> OLD.PointSalesIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.PointSalesIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
    IF NEW.ReceiptNumber <> OLD.ReceiptNumber THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.ReceiptNumber); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
    IF NEW.ReceiptNumberTo <> OLD.ReceiptNumberTo THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.ReceiptNumberTo); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
    IF NEW.BuyerDocumentCodeIDn <> OLD.BuyerDocumentCodeIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.BuyerDocumentCodeIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
    IF NEW.AfipSubjectIDn <> OLD.AfipSubjectIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.AfipSubjectIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
    IF NEW.BuyerName <> OLD.BuyerName THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.BuyerName); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
    IF NEW.TotalOperation <> OLD.TotalOperation THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.TotalOperation); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
    IF NEW.ConceptsNotMakeUpIva <> OLD.ConceptsNotMakeUpIva THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.ConceptsNotMakeUpIva); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
    IF NEW.UncategorizedPerception <> OLD.UncategorizedPerception THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.UncategorizedPerception); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
    IF NEW.ExemptOperations <> OLD.ExemptOperations THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.ExemptOperations); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
    IF NEW.PaymentPerceptionNationalTaxes <> OLD.PaymentPerceptionNationalTaxes THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.PaymentPerceptionNationalTaxes); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
    IF NEW.GrossIncomePerception <> OLD.GrossIncomePerception THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.GrossIncomePerception); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
    IF NEW.MunicipalTaxPerceptions <> OLD.MunicipalTaxPerceptions THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.MunicipalTaxPerceptions); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
    IF NEW.InternalTaxes <> OLD.InternalTaxes THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.InternalTaxes); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
    IF NEW.CurrencyIDn <> OLD.CurrencyIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.CurrencyIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
    IF NEW.ExchangeRate <> OLD.ExchangeRate THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.ExchangeRate); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
    IF NEW.NumberIvaRates <> OLD.NumberIvaRates THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.NumberIvaRates); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
    IF NEW.SellerOperationIDn <> OLD.SellerOperationIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.SellerOperationIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
    IF NEW.OtherTaxes <> OLD.OtherTaxes THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.OtherTaxes); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
    IF NEW.PaymentDueRate <> OLD.PaymentDueRate THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.PaymentDueRate); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
    IF NEW.ComputableTaxCredit <> OLD.ComputableTaxCredit THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.ComputableTaxCredit); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
    IF NEW.IssuerCuitIDn <> OLD.IssuerCuitIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.IssuerCuitIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
    IF NEW.IssuerName <> OLD.IssuerName THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.IssuerName); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
    IF NEW.CommisionIva <> OLD.CommisionIva THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.CommisionIva); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
    IF NEW.StateIDn <> OLD.StateIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.StateIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
    IF NEW.CreatedByIDn <> OLD.CreatedByIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.CreatedByIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
    IF NEW.LastModifiedByIDn <> OLD.LastModifiedByIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.LastModifiedByIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
    IF NEW.OwnerIDn <> OLD.OwnerIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.OwnerIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
    IF v_TableHistoryOld IS NULL THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',NEW.DateCreated); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
    IF NEW.DateTimeStamp <> OLD.DateTimeStamp THEN SET v_TableHistory := concat(v_TableHistory,'†',OLD.DateTimeStamp); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
    IF NEW.TzNameIDn <> OLD.TzNameIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.TzNameIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
    IF NEW.TzOffset <> OLD.TzOffset THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.TzOffset); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
    IF v_TableHistoryOld IS NULL THEN
        SET NEW.TableHistory := v_TableHistory;
    ELSE
        SET NEW.TableHistory := concat(v_TableHistory,'‡',v_TableHistory);
    END IF;
  END IF;
END$$
DELIMITER ;

-- Lista los datos de la tabla
SELECT * FROM `accountingdb`.`AccAfipIvaSaleReceipts_Tbl`;
