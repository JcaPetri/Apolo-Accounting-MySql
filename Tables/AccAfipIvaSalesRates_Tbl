-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
-- Create the AccAfipIvaSalesRates_Tbl table
/*Contains the receipts sales information stored in the AFIP.
This information is chargered automatically by the software. 
The user should never change this table.*/
-- #########################################################################################################################################################################################
-- ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Delete the table AccAfipIvaSalesRates_Tbl if Exits, but first you must to altere the tables that have a referenced foreign key
USE accountingdb;

-- After deleted the referenced, you can delete the table
DROP TABLE IF EXISTS `accountingdb`.`AccAfipIvaSalesRates_Tbl`;

CREATE TABLE `accountingdb`.`AccAfipIvaSalesRates_Tbl` (
    `IDNum` int NOT NULL AUTO_INCREMENT COMMENT 'The IDNum is the autoincrement number', 
    `ID` char(38) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL COMMENT 'The ID is the uniqueidentifier auto generated V4', 
    `SalesReceiptTypeIDn` int NOT NULL COMMENT 'The SalesReceiptTypeIDn is the IdNum of the table 1538-AccAfipSalesReceiptTypes_Tbl, could be FC A, B, NC A, B, etc.',
    `PointSaleIDn` int NOT NULL COMMENT 'The PointSaleIDn is the IdNum of the table 1543-AccAfipPointSales_Tbl, could be 0001, 0002, ... etc.',
    `ReceiptNumber` int NOT NULL COMMENT 'Is a integer number up of zero.',
    `NetAmountTaxed` decimal(11,4) NOT NULL COMMENT 'Is a numeric number with 4 zero',
    `IvaRateIDn` int NOT NULL COMMENT 'The IvaRateIDn is the IdNum of the table 1543-AccAfipIvaRates_Tbl.',
    `TaxSettled` decimal(11,4) NOT NULL COMMENT 'The value of the Tax settled.',
    `StateIDn` smallint NOT NULL COMMENT 'The StatedIDn define if the record is enable or not.',
    `CreatedByIDn` int NOT NULL COMMENT 'The CreatedByIDn is the IdNum of the user who created the record.',
    `LastModifiedByIDn` int NOT NULL COMMENT 'The LastModifiedByIDn is the IdNum of the last user who modified the record.',
    `OwnerIDn` int NOT NULL COMMENT 'The OwnerIDn is the IdNum of the record owner.',
    `DateCreated` datetime NOT NULL COMMENT 'The DateCreated is the record creation date with UTC.',
    `DateTimeStamp` timestamp NOT NULL COMMENT 'The DateTimeStamp is the date of the last modification of the record with UTC.',
    `TzNameIDn` smallint NOT NULL COMMENT 'The IDNum of the TimeZone',				
    `TzOffset` smallint NOT NULL COMMENT 'The diferences between ZeroTimeZone and the TimeZone where the record is created or updated.',					
    `TableHistory` text CHARACTER SET utf8mb4 COLLATE utf8mb4_bin COMMENT 'The TableHistory contain then change history of each column.',
    PRIMARY KEY `ID_AIsrPriKey` (`IDNum`) COMMENT 'The sequence AccAfipIvaSalesRates_Tbl generate the nextval',
    UNIQUE KEY `ID_AIsrUnique` (`ID`) /*!80000 INVISIBLE */ COMMENT 'Is the uniqueidentifier.',
    UNIQUE KEY `IDNum_AIsrUnique` (`IDNum`) COMMENT 'The IDNum must be unique.',
    KEY `ID_AIsrIdx` (`ID`) /*!80000 INVISIBLE */ COMMENT 'The ID alway must be indexed.',
    KEY `IDNum_AIsrIdx` (`IDNum`) /*!80000 INVISIBLE */ COMMENT 'The IDNum must always be indexed.',
    KEY `SalesRecPointNumber_AIsrIdx` (`SalesReceiptTypeIDn`,`SalePointIDn`,`ReceiptNumber`) /*!80000 INVISIBLE */ COMMENT 'The IDNum must always be indexed.'
) ENGINE=InnoDB 
	AUTO_INCREMENT=0 
	DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin 
	COMMENT='Contains the receipts sales information stored in the AFIP.
This information is chargered automatically by the software. 
The user should never change this table.';

-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
-- Create the Trigger Before Insert - AccAfipIvaSalesRates_Tbl
USE accountingdb;
DROP TRIGGER IF EXISTS `accountingdb`.`AccAfipIvaSalesRatesBeforeInsert_Trg`;
DELIMITER $$
USE `accountingdb`$$
-- DEFINER=`root`@`localhost` -- When create Trigger in localhost, must add Definer between CREATE and TRIGGER key word.
CREATE TRIGGER `AccAfipIvaSalesRatesBeforeInsert_Trg` BEFORE INSERT ON `AccAfipIvaSalesRates_Tbl` FOR EACH ROW BEGIN
	-- In the case, which the request do not give this value, MySql created it.
	-- Set the ID uniqueidentifier, IDCode, DateCreated and DateTimeStamp
	IF new.ID IS NULL OR new.ID = '' THEN
		SET new.ID = uuid();				-- Set the UniqueIdentifier Value
	END IF;
	SET new.DateCreated = ifnull(new.DateCreated,CURRENT_TIMESTAMP);
	SET new.DateTimeStamp = ifnull(new.DateTimeStamp,CURRENT_TIMESTAMP);
END$$
DELIMITER ;

-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
-- Create the Trigger Before Update - AccAfipIvaSalesRates_Tbl
-- en caso que desde Java no pasen la informacion de estos campos,
-- establece el valor del DateTimeStamp, TableHistory creando el historico de cada registro
USE accountingdb;
DROP TRIGGER IF EXISTS `accountingdb`.`AccAfipIvaSalesRatesBeforeUpdate_Trg`;
DELIMITER $$
USE `accountingdb`$$
-- DEFINER=`root`@`localhost` -- When create Trigger in localhost, must add Definer between CREATE and TRIGGER key word.
CREATE TRIGGER `AccAfipIvaSalesRatesBeforeUpdate_Trg` BEFORE UPDATE ON `AccAfipIvaSalesRates_Tbl` FOR EACH ROW BEGIN
	DECLARE v_TableHistory text;
	DECLARE v_TableHistoryOld text;
	SET new.DateTimeStamp = ifnull(new.DateTimeStamp,CURRENT_TIMESTAMP);
    IF new.TableHistory = 'SetNull' THEN
		SET new.TableHistory = null;
    ELSEIF new.TableHistory = 'SetOff' THEN
		SET new.TableHistory = old.TableHistory;
    ELSE
		-- When the (New) value is equal the (Old), you set an empty update, because the value is steal in the record.
		-- When the (New) value is diferent with the (Old), you set the old value in the update. The new value is in the record.
		SET v_TableHistoryOld := old.TableHistory;
		SET v_TableHistory = '';
		-- IDNum, this value never changes.
		-- ID, this value never changes.
		IF NEW.SalesReceiptTypeIDn <> OLD.SalesReceiptTypeIDn THEN SET v_TableHistory := OLD.SalesReceiptTypeIDn; ELSE SET v_TableHistory := '†'; END IF;
		IF NEW.PointSaleIDn <> OLD.PointSaleIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.PointSaleIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.ReceiptNumber <> OLD.ReceiptNumber THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.ReceiptNumber); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.NetAmountTaxed <> OLD.NetAmountTaxed THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.NetAmountTaxed); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.IvaRateIDn <> OLD.IvaRateIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.IvaRateIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.TaxSettled <> OLD.TaxSettled THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.TaxSettled); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
    IF NEW.StateIDn <> OLD.StateIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.StateIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.CreatedByIDn <> OLD.CreatedByIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.CreatedByIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.LastModifiedByIDn <> OLD.LastModifiedByIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.LastModifiedByIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.OwnerIDn <> OLD.OwnerIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.OwnerIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF v_TableHistoryOld IS NULL THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',NEW.DateCreated); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.DateTimeStamp <> OLD.DateTimeStamp THEN SET v_TableHistory := concat(v_TableHistory,'†',OLD.DateTimeStamp); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.TzNameIDn <> OLD.TzNameIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.TzNameIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.TzOffset <> OLD.TzOffset THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.TzOffset); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF v_TableHistoryOld IS NULL THEN
			SET NEW.TableHistory := v_TableHistory;
		ELSE
			SET NEW.TableHistory := concat(v_TableHistory,'‡',v_TableHistory);
		END IF;
	END IF;
END$$
DELIMITER ;

-- Lista los datos de la tabla
SELECT * FROM `accountingdb`.`AccAfipIvaSalesRates_Tbl`;
