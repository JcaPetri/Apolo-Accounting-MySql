-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
-- Create the accdatamapping_tbl table
-- ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Delete the table accdatamapping_tbl if Exits, but first you must to altere the tables that have a referenced foreign key

USE accountingdb;
-- First you must to delete the Foreing Key Constraint;
-- The referenced accdatamapping_tbl Tables:
ALTER TABLE `accountingdb`.`artdataelementlanguag_tbl` DROP FOREIGN KEY `dataelementlanguageidn_adecrel`;
ALTER TABLE `accountingdb`.`artdataelementcomment_tbl` DROP FOREIGN KEY `dataelementcommentidn_adecrel`;

USE accountingdb;
-- After deleted the referenced, you can delete the table
DROP TABLE IF EXISTS `accountingdb`.`accdatamapping_tbl`;

CREATE TABLE `accountingdb`.`accdatamapping_tbl` (
    `accdatamapping_idnum` int NOT NULL AUTO_INCREMENT COMMENT 'The accdatamapping_idnum is the autoincrement number', 
    `accdatamapping_id` char(38) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL COMMENT 'The accdatamapping_id is the uniqueidentifier auto generated V4', 
    `datamapping` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL COMMENT 'The datamapping the union of the MapperName plus the source field.',
    `fieldorder` smallint NOT NULL COMMENT 'The fieldorder is the numeric order.',
    `sourcefield` smallint NOT NULL COMMENT 'The sourcefield the number of the column array to be mapped. It started with one.',
    `sourceignored` tinyint NOT NULL COMMENT 'The sourceignored is true (1) if the sourcefield must be ignored, default is false (0) the source is enabled.',
    `dataconvert_idn` int NOT NULL COMMENT 'The dataconvert_idn is the function applied to the source to fit in the targetfield.',
    `targetfield_idn` int NOT NULL COMMENT 'The targetfield_idn field that are going to receive the value.',
    `dataexporttotable_idn` int NOT NULL COMMENT 'The dataexporttotable_idn is the user_idnum of the user who created the record. Linked to the userdb database through userauthorization_tbl.',
    `state_idn` smallint NOT NULL COMMENT 'The stated_idn define if the record is enable or not, or the custom state difined. Linked to the system database through sysbaseelement_mir.',
    `table_history` text CHARACTER SET utf8mb4 COLLATE utf8mb4_bin COMMENT 'The table_history contain then change history of each column. The value is set only if it has changed from the previous value.',
    PRIMARY KEY `accdatamappingidnum_admpkey` (`accdatamapping_idnum`) COMMENT 'The sequence is an autoincremental value.',
    UNIQUE KEY `accdatamappingidnum_admpuni` (`accdatamapping_idnum`) COMMENT 'The dataelements_idnum must be unique.',
    KEY `accdatamappingidnum_admpidx` (`accdatamapping_idnum`) /*!80000 INVISIBLE */ COMMENT 'The accdatamapping_idnum must always be indexed.',
    UNIQUE KEY `accdatamappingid_admpuni` (`accdatamapping_id`) /*!80000 INVISIBLE */ COMMENT 'Is the uniqueidentifier.',
    KEY `accdatamappingid_admpidx` (`accdatamapping_id`) /*!80000 INVISIBLE */ COMMENT 'The accdatamapping_id alway must be indexed.',
    UNIQUE KEY `dataexptblsourcefield_admpuni` (`sourcefield` ASC, `dataexporttotable_idn` ASC) COMMENT 'For each dataMapper you can have one source field.',
    KEY `statesourfielddataexptble_admpidx` (`state_idn`ASC, `sourcefield` ASC, `dataexporttotable_idn`ASC) COMMENT 'To optimize the search of Microservices Tables.'
) ENGINE=InnoDB 
  AUTO_INCREMENT=0 
  DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin 
  COMMENT='Contains the definition of the mapper to import arrayfile to a table.
Concept: the output of the process file, es an array with the data that we need to import.
             to mapping this array, you need to setup each column in the array with each field table.
             you can apply a specific function to convert the source value to the target value type.
The key for each record:
    accdatamapping_idnum --> is the autoincrement number auto generated.
    accdatamapping_id --> is the uniqueidentifier auto generated.
        Clarification: idn = idnum (all the field ended with _idn, the origen of the value is the column idnum of the table sysbaseelement_tbl or accdatamapping_tbl).
The unique Key is the union of:
    For mapper you can assign one time the sourcefield number.
        dataexporttotable_idn -> is id of the table.
        sourcefield -> the sourcefield is the number of the array column.';


-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
-- Create the Trigger Before Insert - accdatamapping_tbl
USE accountingdb;
DROP TRIGGER IF EXISTS `accountingdb`.`accdatamappingBeforeInsert_Trg`;
DELIMITER $$
USE `accountingdb`$$
    -- DEFINER=`root`@`localhost` -- When create Trigger in localhost, must add Definer between CREATE and TRIGGER key word.
CREATE TRIGGER `accdatamappingBeforeInsert_Trg` BEFORE INSERT ON `accdatamapping_tbl` FOR EACH ROW BEGIN
    -- In the case, which the request do not give this value, MySql created it.
    -- Set the ID uniqueidentifier, targettable_idn, date_created and date_timestamp
    IF new.accdatamapping_id IS NULL OR new.accdatamapping_id = '' THEN
        SET new.accdatamapping_id = uuid(); -- Set the UniqueIdentifier Value
    END IF;
END$$
DELIMITER ;

-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
-- Create the Trigger Before Update - accdatamapping_tbl
-- en caso que desde Java no pasen la informacion de estos campos,
-- establece el valor del date_timestamp, table_history creando el historico de cada registro
USE accountingdb;
DROP TRIGGER IF EXISTS `accountingdb`.`accdatamappingBeforeUpdate_Trg`;
DELIMITER $$
USE `accountingdb`$$
    -- DEFINER=`root`@`localhost` -- When create Trigger in localhost, must add Definer between CREATE and TRIGGER key word.
CREATE TRIGGER `accdatamappingBeforeUpdate_Trg` BEFORE UPDATE ON `accdatamapping_tbl` FOR EACH ROW BEGIN
    DECLARE v_tablehistory text;
    DECLARE v_tablehistoryold text;
    IF new.table_history = 'SetNull' THEN
        SET new.table_history = null;
    ELSEIF new.table_history = 'SetOff' THEN
        SET new.table_history = old.table_history;
    ELSE
        -- When the (New) value is equal the (Old), you set an empty update, because the value is steal in the record.
        -- When the (New) value is diferent with the (Old), you set the old value in the update. The new value is in the record.
        SET v_tablehistoryold := old.table_history;
        SET v_tablehistory = '';
        -- accdatamapping_idnum, this value never changes.
        -- accdatamapping_id, this value never changes.
        IF NEW.datamapping <> OLD.datamapping THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.datamapping); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF NEW.fieldorder <> OLD.fieldorder THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.fieldorder); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF NEW.sourcefield <> OLD.sourcefield THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.sourcefield); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF NEW.sourceignored <> OLD.sourceignored THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.sourceignored); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF NEW.dataconvert_idn <> OLD.dataconvert_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.dataconvert_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF NEW.targetfield_idn <> OLD.targetfield_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.targetfield_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF NEW.dataexporttotable_idn <> OLD.dataexporttotable_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.dataexporttotable_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF NEW.state_idn <> OLD.state_idn THEN SET v_tablehistory := CONCAT(v_tablehistory,'†',OLD.state_idn); ELSE SET v_tablehistory := CONCAT(v_tablehistory,'†'); END IF;
        IF v_tablehistoryold IS NULL THEN
            SET NEW.table_history := v_tablehistory;
            -- This line ensures add the first history value.
        ELSE
            SET NEW.table_history := concat(v_tablehistory,'‡',v_tablehistory);
            -- This line concat the new and old history value.
        END IF;
    END IF;
END$$
DELIMITER ;

-- Lista los datos de la tabla
SELECT * FROM `accountingdb`.`accdatamapping_tbl`;
